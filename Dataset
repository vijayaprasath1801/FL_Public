
enum Status {
  TERMINATED_WITH_ERROR = "TERMINATED_WITH_ERROR",
  COMPLETED = "COMPLETED",
  PENDING = "PENDING",
}


       <MenuButton
          width={200}
          label="Actions"
          kind="standard"
          selectedValue=""
          role="menu"
          onSelectedValueChange={(value: string) => handleActionValueChange(value, item)}
        >
          {item.paymentsCount === 0 ? (
            <>
              <MenuItem role="menuItem" value="purge">
                Delete/Purge
              </MenuItem>
            </>
          ) : (
            <>
              <MenuItem role="menuItem" value="run">
                Schedule a Run
              </MenuItem>
              <MenuItem role="menuItem" value="purge">
                Purge
              </MenuItem>
            </>
          )}
        </MenuButton>

export const actionOptions = (count) =>{
return count !== 0 ? [
{label:'Schedule a run',
value:'run'},
{label:'Purge', 
value:'purge'}] :
[{label:'Purge', 
value:'purge'}]
}


    formatter: ({ item }: any) => (
        <span
          style={{
            color: item.status === Status.PENDING ? "yellow" : "inherit",
          }}
        >
          {moment(item?.harvestedDate).format("YYYY/MM/DD LT")}
        </span>
      ),


     formatter: ({ item }: any) => (
        <span
          style={{
            color: item.status === Status.PENDING ? "yellow" : "inherit",
          }}
        >
          {item.paymentsCount}
        </span>
      ),


  rowClassName={({ item }: any) =>
    item.status === Status.PENDING ? "highlight-pending-row" : ""
  }

.highlight-pending-row {
  background-color: #fff3cd; /* Light yellow */
  color: #856404; /* Brownish text */
}
  rowClassName={({ item }) =>
    props.highlightRow && item[props.highlightEntries.key] === props.highlightEntries.value
      ? "highlight-pending-row"
      : ""
  }


  if (formSubmitting.current) {
    return; // Prevent duplicate submissions
  }

  formSubmitting.current = true; // Lock form submission

 finally {
    formSubmitting.current = false; // Unlock form submission
  }

    const result = await dispatch(uploadPaymentDatasetAction(formData));
      if (result?.payload?.status === 'success') {
        setOpenPopup(true); // Show popup immediately
      }


 keepUnusedDataFor: 5,
  refetchOnFocus: true, // Re-fetch when the window regains focus
  refetchOnReconnect: true,
 refetchOnMountOrArgChange: true,
 pollingInterval: 5000,


 useEffect(() => {
    // Dispatch initial fetch
    dispatch(fetchAllPaymentDatasetAction());

    // Set up polling for auto-refresh
    const interval = setInterval(() => {
      dispatch(fetchAllPaymentDatasetAction());
    }, 5000); // Adjust the interval as needed, e.g., 5000ms for 5 seconds

    // Clear interval on component unmount
    return () => clearInterval(interval);
  }, [dispatch]);



const [endDateMaxSelectableDate, setEndDateMaxSelectableDate] = useState(null);
const [startDateMinSelectableDate, setStartDateMinSelectableDate] = useState(null);

const handleFormChange = (name, value) => {
  if (name === 'startDate') {
    setFormData({ ...formData, startDate: value });
    // Update the maxSelectableDate for the end date
    setEndDateMaxSelectableDate(new Date(value));
  } else if (name === 'endDate') {
    setFormData({ ...formData, endDate: value });
    // Update the minSelectableDate for the start date
    setStartDateMinSelectableDate(new Date(value));
  }
};

<DatePicker
  required
  label="Start Date"
  name="startDate"
  value={formData.startDate}
  disableWeekends={true}
  onValueChange={handleFormChange}
  maxSelectableDate={endDateMaxSelectableDate}
  customStrings={{
    dateCannotBeAfter: (customDayAfter) => `Date cannot be after ${customDayAfter}`,
  }}
  disabledDates={{
    after: endDateMaxSelectableDate,
  }}
/>

<DatePicker
  required
  label="End Date"
  name="endDate"
  minSelectableDate={startDateMinSelectableDate}
  disableWeekends={true}
  value={formData.endDate}
  fromMonth={formData.startDate}
  customStrings={{
    dateCannotBeBefore: (customDayBefore) => `Date cannot be before ${customDayBefore}`,
  }}
  onValueChange={handleFormChange }
  disabledDates={{
    before: startDateMinSelectableDate,
  }}
/>



    customValidators={[
        (value) => {
            const parsedValue = parseInt(value, 10);
            if (isNaN(parsedValue)) {
                return 'Please enter a valid number.';
            }
            if (value.length > 2) {
                return 'Input cannot exceed 2 digits.';
            }
            if (parsedValue < 0 || parsedValue > 23) {
                return 'Allowed Values are: 00-23';
            }
            return null; // No error
        },
    ]}



import { render, screen } from '@testing-library/react';
import PaginatedTable from './PaginatedTable'; // Replace with the correct path

test('renders spinner in paymentsCount column when status is PENDING', () => {
  const pendingMockData = {
    items: [
      {
        datasetName: "test1",
        activeRunId: "123",
        status: "PENDING",
        harvestedDate: "11-02-2024",
        paymentsCount: "5",
      },
    ],
    totalItems: 1,
    pageNumber: 1,
    itemsPerPage: 10,
  };

  const mockColumns = [
    { key: "datasetName", label: "Dataset Name", align: "left" },
    { key: "harvestedDate", label: "Harvested Date", align: "left" },
    {
      key: "paymentsCount",
      label: "No. of Payments",
      align: "left",
      formatter: (item) => (
        <span
          style={{
            color: item.status === "PENDING" ? "#FFA500" : "inherit",
          }}
        >
          {item.status === "PENDING" ? (
            <ProgressSpinner data-testid="paymentSpinner" size="s" />
          ) : (
            item.paymentsCount
          )}
        </span>
      ),
    },
  ];

  render(
    <PaginatedTable
      loading={false}
      tableColumns={mockColumns}
      data={pendingMockData}
      pageNumber={1}
      sortColumns={[]}
      itemsPerPage={10}
      rowKey="activeRunId"
      onPagination={jest.fn()}
      highLightRow={true}
      highLightEntries={{
        key: "status",
        value: "PENDING",
      }}
    />
  );


  const paymentSpinner = screen.getByTestId('paymentSpinner');
  expect(paymentSpinner).toBeInTheDocument();


  const paymentText = screen.queryByText('5');
  expect(paymentText).not.toBeInTheDocument();


  const harvestedDateText = screen.queryByText("11-02-2024");
  expect(harvestedDateText).not.toBeInTheDocument();
});

 expect(paymentSpinners.length).toBeGreaterThan(0);
SHMX-2376 - Loaders for payment and date harvested tablecell and start and end date validation


      if (
        formData.startDate === formData.endDate &&
        parsedValue < parseInt(formData.startTimeHours || "0", 10)
      ) {
        return "End time hour must be later than start time hour.";
      }


    if (
        formData.startDate === formData.endDate &&
        parseInt(formData.endTimeHours || "0", 10) ===
          parseInt(formData.startTimeHours || "0", 10) &&
        parsedValue <= parseInt(formData.startTimeMinutes || "0", 10)
      ) {
        return "End time minute must be later than start time minute.";
      }

  onValueChange={(value) => {
    if (value.length <= 50) {
      handleFormChange(value); // Only update if within 50 characters
    }
  }}

  setFormData((prevData) => ({
        ...prevData,
        description: value, // Directly update the formData state
      }));

  onKeyDown={(event) => {
    if ((formData.description?.length || 0) >= 50 && event.key !== "Backspace") {
      event.preventDefault(); // Prevent additional input if the limit is reached
    }
  }}
formatter: (item) => {
  if (item.status === "FAILED") {
    return (
      <span>
        <IconError color="red" /> {/* Replace IconError with your desired icon */}
      </span>
    );
  } else if (item.status === "COMPLETED" && item.payment === 0) {
    return (
      <span>
        <IconNoPayment color="blue" /> {/* Replace IconNoPayment with your desired icon */}
      </span>
    );
  } else {
    return "-"; // Default case
  }
};



import { useEffect, useState } from "react";

const PollingComponent = ({ item, fetchApi, onUpdate }) => {
  const [polling, setPolling] = useState(true);
  const [data, setData] = useState(null);

  useEffect(() => {
    if (!item.datasetId || !polling) return;

    const intervalId = setInterval(async () => {
      try {
        const updatedData = await fetchApi(item.datasetId);
        if (updatedData) {
          setData(updatedData);
          onUpdate(updatedData);

          if (
            updatedData.status !== "PENDING" &&
            updatedData.status !== "PROCESSING"
          ) {
            setPolling(false);
          }
        }
      } catch (error) {
        console.error("Error while polling API:", error);
      }
    }, 3000);

    return () => clearInterval(intervalId);
  }, [item.datasetId, polling, fetchApi, onUpdate]);

  const displayValue = data
    ? data.status === "PENDING" || data.status === "PROCESSING"
      ? "-"
      : data.paymentsCount
    : "-"; // Show '-' if no data or status is PENDING/PROCESSING

  return <span>{displayValue}</span>;
};

export default PollingComponent;



  const fetchApi = async (id) => {
    const response = await fetch(`/api/payment-dataset/${id}`); // Example API
    const data = await response.json();
    return data;
  };

  const handleRowUpdate = (updatedRow) => {
    setPaymentDatasetData((prevData) =>
      prevData.map((row) =>
        row.id === updatedRow.id ? { ...row, ...updatedRow } : row
      )
    );
  };

 <PollingComponent
       
            datasetId={item}
            fetchApi={fetchApi}
            onUpdate={handleRowUpdate}
          />


import { useEffect, useState } from "react";

const PollingComponent = ({ items, fetchApi, onUpdate }) => {
  const [pendingItems, setPendingItems] = useState([]);

  useEffect(() => {
    // Identify pending items initially
    const initialPending = items.filter(
      (item) => item.status === "PENDING" || item.status === "PROCESSING"
    ).map((item) => item.datasetId);
    setPendingItems(initialPending);
  }, [items]);

  useEffect(() => {
    if (pendingItems.length === 0) return;

    const intervalId = setInterval(async () => {
      try {
        const updatedStatuses = await Promise.all(
          pendingItems.map((id) => fetchApi(id))
        );

        const updatedPending = [];
        updatedStatuses.forEach((updatedData) => {
          if (updatedData.status === "PENDING" || updatedData.status === "PROCESSING") {
            updatedPending.push(updatedData.datasetId);
          } else {
            onUpdate(updatedData); // Notify parent of updated data
          }
        });

        setPendingItems(updatedPending);

        // Stop polling if all items are completed
        if (updatedPending.length === 0) {
          clearInterval(intervalId);
        }
      } catch (error) {
        console.error("Error while polling API:", error);
      }
    }, 3000);

    return () => clearInterval(intervalId);
  }, [pendingItems, fetchApi, onUpdate]);

  return null; // Component does not render UI directly
};

export default PollingComponent;


.addCase(fetchPaymentDatasetActionUpdatePending.fulfilled, (state, { payload }) => {
  const { datasetId, ...updatedData } = payload;

  // Find the index of the item to update
  const index = state.data.items.findIndex((item) => item.datasetId === datasetId);

  if (index !== -1) {
    // Update the item in the array
    state.data.items[index] = {
      ...state.data.items[index], // Preserve existing properties
      ...updatedData, // Merge updated data
    };
  }
});

import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchPaymentDatasetActionUpdatePending } from "../redux/actions/paymentDatasetActions";

const PollingComponent = () => {
  const [pendingItems, setPendingItems] = useState([]);
  const dispatch = useDispatch();
  const paymentSetData = useSelector((state) => state.payment.paymentSetData);

  useEffect(() => {
    // Identify pending items initially
    const initialPending = paymentSetData
      .filter((item) => item.status === "PROCESSING" || item.status === "PENDING")
      .map((item) => item.datasetId);
    setPendingItems(initialPending);
  }, [paymentSetData]);

  useEffect(() => {
    if (pendingItems.length === 0) return;

    const intervalId = setInterval(async () => {
      try {
        const updatedStatuses = await Promise.all(
          pendingItems.map((id) =>
            dispatch(fetchPaymentDatasetActionUpdatePending({ id }))
          )
        );

        const updatedPending = [];
        updatedStatuses.forEach((updatedData) => {
          if (
            updatedData.status === "PENDING" ||
            updatedData.status === "PROCESSING"
          ) {
            updatedPending.push(updatedData.datasetId);
          }
        });
        setPendingItems(updatedPending);

        // Stop polling if all items are completed
        if (updatedPending.length === 0) {
          clearInterval(intervalId);
        }
      } catch (error) {
        console.error("Error while polling:", error);
      }
    }, 3000);

    return () => clearInterval(intervalId);
  }, [pendingItems, dispatch]);

  return null; // This component does not render UI, only handles updates
};

export default PollingComponent;



const statusEnum = {  
  ERROR: "FAILED",
  COMPLETED: "COMPLETED",
  PENDING: "PENDING",
  PROCESSING: "PROCESSING",
};

const statuses = {  
  'ERROR',
  'COMPLETED',
  'PENDING',
 'PROCESSING',
};


const statuses = {
  KEYS: {
    ERROR: 'ERROR',
    COMPLETED: 'COMPLETED',
    PENDING: 'PENDING',
    PROCESSING: 'PROCESSING',
  },
  VALUES: {
    ERROR: 'FAILED',
    COMPLETED: 'COMPLETED',
    PENDING: 'PENDING',
    PROCESSING: 'PROCESSING',
  },
};

const tableCellValueRender = ({ compare, value }) => { 
  const isPendingOrProcessing = [statuses.KEYS.PENDING, statuses.KEYS.PROCESSING ,statuses.KEYS.FAILED ].includes(compare);

  return (
    <div>
      {isPendingOrProcessing ? '-' : value}
    </div>
  );
}


const validateTimeInput = (value, type, startTime, formData) => {
  const parsedValue = parseInt(value, 10);
  const isEndTime = type === 'end';
  if (isNaN(parsedValue)) {
    return "Enter a valid number.";
  }
  if (value.length > 2) {
    return "Cannot exceed 2 digits.";
  }
  if (parsedValue < 0 || parsedValue > 23) {
    return "Allowed values are: 00-23.";
  }
  if (isEndTime && formData.startDate && formData.endDate) {
    const startTimeHours = parseInt(startTime || "0", 10);
    if (parsedValue < startTimeHours) {
      return "End time hour must be later than start time hour.";
    }
  }
  return null; 
};

   const intervalId = setInterval(async () => {
      try {
        const updatedPending = [];
        for (const id of pendingItems) {
          const updatedData = await dispatch(fetchPaymentDatasetActionUpdatePending({ id }));

          if ([statuses.KEYS.PENDING, statuses.KEYS.PROCESSING].includes(updatedData.status)) {
            updatedPending.push(updatedData.payload);
          }
        }
        const pendingIds = updatedPending.map((item) => item.id) ?? [];
        setPendingItems(pendingIds);
        if (updatedPending.length === 0) {
          clearInterval(intervalId);
        }
      } catch (error) {
        console.error("Error while polling:", error);
      }
    }, 10000);

    return () => clearInterval(intervalId);


   if (index !== -1) {
          // Use immer to produce the new state
          state.data.items = produce(state.data.items, draft => {
            draft[index] = { ...draft[index], ...updatedData };
          });
        }

  if (index !== -1) {
    state.data.items = state.data.items.map((item, i) =>
      i === index ? { ...item, ...updatedData } : item
    );
  }
