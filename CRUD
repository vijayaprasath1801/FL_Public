
import { createAsyncThunk } from "@reduxjs/toolkit";

export function createCRUDThunk(actionType, apiFunc) {
  return createAsyncThunk(actionType, async (payload, thunkAPI) => {
    try {
      const response = await apiFunc(payload);
      return response;
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message || "Unknown error");
    }
  });
}




import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  data: null,
  loading: false,
  error: null,
};

export const createCommonSlice = (name, asyncThunk) => {
  return createSlice({
    name,
    initialState,
    reducers: {},
    extraReducers: (builder) => {
      builder
        .addCase(asyncThunk.pending, (state) => {
          state.loading = true;
          state.error = null;
        })
        .addCase(asyncThunk.fulfilled, (state, action) => {
          state.loading = false;
          state.data = action.payload;
        })
        .addCase(asyncThunk.rejected, (state, action) => {
          state.loading = false;
          state.error = action.error.message || "Something went wrong";
        });
    },
  });
};


// store/payment/paymentSlice.js
import { createCRUDSlice } from "../common/crudSlice";
import { fetchAllPaymentDatasetAction } from "./paymentActions";

const paymentSlice = createCRUDSlice("paymentDataset", fetchAllPaymentDatasetAction);

export const paymentReducer = paymentSlice.reducer;



// constants.js
export const CRUD_MODES = {
  CREATE: "create",
  UPDATE: "update",
  DELETE: "delete",
};

  switch (mode) {
    case CRUD_MODES.CREATE:
      return await dispatch(createPaymentAction(payload));
    case CRUD_MODES.UPDATE:
      return await dispatch(updatePaymentAction(payload));
    case CRUD_MODES.DELETE:
      return await dispatch(deletePaymentAction(payload));
    default:
      throw new Error("Unsupported CRUD mode: " + mode);
  }
