import React from "react";
import { render, act, screen } from "@testing-library/react";
import { OidcProvider, useAuth } from "react-oidc-context";
import { useDispatch } from "react-redux";
import { envActions } from "../reducers/env.reducer";
import { useAuthHook } from "./useAuthHook";

jest.mock("react-oidc-context", () => ({
  useAuth: jest.fn(),
  hasAuthParams: jest.fn(() => false),
}));

jest.mock("react-redux", () => ({
  useDispatch: jest.fn(),
}));

const TestComponent = () => {
  const { auth, env, panelopen, setPanelopen } = useAuthHook();
  return (
    <div>
      <button onClick={() => setPanelopen(!panelopen)}>Toggle Panel</button>
      {panelopen && <div data-testid="panel">Panel is open</div>}
      {auth.isAuthenticated && <div data-testid="authenticated">Authenticated</div>}
      {env && <div data-testid="env">{JSON.stringify(env)}</div>}
    </div>
  );
};

describe("useAuthHook", () => {
  const mockDispatch = jest.fn();
  const mockAuth = {
    isAuthenticated: false,
    user: {
      access_token: "mockAccessToken",
      profile: {
        sub: "mockUserId",
        csgroups: ["role1", "role2"],
      },
    },
    events: {
      addAccessTokenExpiring: jest.fn(),
      addAccessTokenExpired: jest.fn(),
      removeUser: jest.fn(),
      revokeTokens: jest.fn(),
      signinRedirect: jest.fn(),
    },
  };

  beforeEach(() => {
    jest.clearAllMocks();
    (useDispatch).mockReturnValue(mockDispatch);
    (useAuth).mockReturnValue(mockAuth);

    sessionStorage.setItem("envConfig", JSON.stringify({ API_URL: "http://mockapi.com" }));
  });

  it("should update session storage and handle authentication", async () => {
    render(<TestComponent />);

    expect(screen.getByTestId("env")).toBeInTheDocument();
    expect(screen.getByTestId("env").textContent).toBe(JSON.stringify({ API_URL: "http://mockapi.com" }));

    expect(screen.queryByTestId("authenticated")).toBeNull();

    act(() => {
      (useAuth).mockReturnValue({ ...mockAuth, isAuthenticated: true });
    });

    render(<TestComponent />);

    expect(screen.getByTestId("authenticated")).toBeInTheDocument();

    const toggleButton = screen.getByRole("button", { name: /Toggle Panel/i });
    act(() => {
      toggleButton.click();
    });

    expect(screen.getByTestId("panel")).toBeInTheDocument();

    act(() => {
      toggleButton.click();
    });

    expect(screen.queryByTestId("panel")).toBeNull();
  });
});
