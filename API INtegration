const dropdowns = useSelector((state) => getCommonState(state)?.dropdowns?.data || {});

const mockData = {
  appId: [
    { label: "App One", value: "app1" },
    { label: "App Two", value: "app2" },
  ],
  countryList: [
    { label: "India", value: "IN" },
    { label: "USA", value: "US" },
  ],
};

useEffect(() => {
  const dispatch = useDispatch();

  dispatch({
    type: "common/dropdowns/fulfilled", // Must match your fulfilled action type
    payload: mockData,
  });
}, []);

// commonSelectors.ts
export const selectCommonModule = (state, moduleKey) =>
  state.COMMON?.[moduleKey] || {};

const dropdownState = useSelector((state) => selectCommonModule(state, "common/dropdowns"));
const allDataState = useSelector((state) => selectCommonModule(state, "common/all"));
export const mockGetDropdownAPI = jest.fn().mockResolvedValue(mockData);

export const mockGetDropdownAPI = jest.fn().mockResolvedValue(mockData);


export const createMockThunk = (type, mockData) => {
  return () => (dispatch) =>
    dispatch({
      type: `${type}/fulfilled`,
      payload: mockData,
    });
};

// Usage
dispatch(createMockThunk("common/dropdowns", { mock: "yes" }));


const USE_MOCKS = true;

const mockGetDropdownAPI = async () => {
  return {
    bloodGroups: ["A+", "B+", "O-"],
    states: ["TN", "MH"],
  };
};

// Use mock or real API dynamically
const getDropdownAPIToUse = USE_MOCKS ? mockGetDropdownAPI : getDropdownAPI;
