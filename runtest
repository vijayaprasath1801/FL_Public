import React from "react";
import { act, screen } from "@testing-library/react";
import { useNavigate, useParams } from 'react-router-dom';
import { configureStore } from "@reduxjs/toolkit";
import { renderWithRedux } from "../../../common/_tests/testUtils/mock-store";
import RunIdSummary from "../index";
import { getRunDatasetState } from "../../../reducers/run.reducer";
import { getRunSummaryAPI } from "../../../service/run.service";

jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useParams: jest.fn(),
  useNavigate: jest.fn(),
}));

jest.mock('../../../service/run.service', () => ({
  getRunSummaryAPI: jest.fn(),
}));

describe("RunIdSummary Component Tests", () => {
  let navigateMock;
  let store;

  beforeEach(() => {
    navigateMock = jest.fn();
    useNavigate.mockReturnValue(navigateMock);
    store = configureStore({
      reducer: {
        [RUN_DATASET_FEATURE_KEY]: runDatasetReducer,
      },
      preloadedState: {
        [RUN_DATASET_FEATURE_KEY]: {
          mismatchByTagData: [],
          mismatchByPaymentType: [],
          totalNumOfPayments: 0,
          runId: "",
          datasetName: "",
          startTime: "",
          endTime: "",
          totalNumberOfMismatches: 0,
          misMatchPercentage: null,
          error: null,
          loading: false,
        },
      },
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("renders table with data for Mismatch Payments", async () => {
    const mockPaymentData = [
      { paymentType: "Payment1", mismatchCounts: 5 },
      { paymentType: "Payment2", mismatchCounts: 3 },
    ];

    getRunSummaryAPI.mockResolvedValueOnce({
      items: [
        {
          runId: "67210f75e5a58fcf4b2f4929",
          datasetName: "IISI_Oct_21_2024_2",
          startTime: "2024-10-21T10:06:30.34",
          endTime: null,
          chunkSize: 500,
          pauseInterval: null,
          status: "STARTED",
          paymentExecutionResult: {
            totalItems: 1,
            pageNumber: 1,
            itemsPerPage: 25,
          },
        },
      ],
    });

    useParams.mockReturnValue({ paymentTestRunId: '673d09c874e7d05da2ec7fc0' });

    store = configureStore({
      reducer: {
        [RUN_DATASET_FEATURE_KEY]: runDatasetReducer,
      },
      preloadedState: {
        [RUN_DATASET_FEATURE_KEY]: {
          mismatchByTagData: [],
          mismatchByPaymentType: mockPaymentData,
          totalNumOfPayments: 1,
          runId: "67210f75e5a58fcf4b2f4929",
          datasetName: "IISI_Oct_21_2024_2",
          startTime: "2024-10-21T10:06:30.34",
          endTime: null,
          totalNumberOfMismatches: 0,
          misMatchPercentage: null,
          error: null,
          loading: false,
        },
      },
    });

    renderWithRedux(<RunIdSummary />, { store });

    await act(async () => await new Promise((r) => setTimeout(r, 0)));

    // Check if the run ID is rendered
    expect(screen.getByText("67210f75e5a58fcf4b2f4929")).toBeInTheDocument();

    // Check if the Mismatch Payments section is rendered
expect(
  screen.getByText(/End:\s*01\/01\/2025/i)
).toBeInTheDocument();

    expect(screen.getByText("Mismatch Payments")).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /Select/i })).toBeInTheDocument();
    expect(screen.getByText("Number Of Payments Mismatched")).toBeInTheDocument();
    expect(screen.getByText("Payment1")).toBeInTheDocument();
    expect(screen.getByText("5")).toBeInTheDocument();
    expect(screen.getByText("Payment2")).toBeInTheDocument();
    expect(screen.getByText("3")).toBeInTheDocument();
  });

  it("renders empty table when no data is returned for Mismatch Payments", async () => {
    getRunSummaryAPI.mockResolvedValueOnce({
      items: [],
    });
    useParams.mockReturnValue({ paymentTestRunId: '673d09c874e7d05da2ec7fc0' });

    renderWithRedux(<RunIdSummary />, { store });

    await act(async () => await new Promise((r) => setTimeout(r, 0)));

    // Check that the Mismatch Payments section is rendered but has no data
    expect(screen.getByText("Mismatch Payments")).toBeInTheDocument();
    expect(screen.queryByText("Number Of Payments Mismatched")).toBeNull();
  });

  it("shows error feedback when there is an error", async () => {
    getRunSummaryAPI.mockRejectedValueOnce(new Error('API Error'));
    useParams.mockReturnValue({ paymentTestRunId: '673d09c874e7d05da2ec7fc0' });

    renderWithRedux(<RunIdSummary />, { store });

    await act(async () => await new Promise((r) => setTimeout(r, 0)));

    expect(screen.getByText("API Error")).toBeInTheDocument();
  });

  it("renders table with data for Mismatch by Tags", async () => {
    const mockTagData = [
      { tagName: "Tag1", mismatchCounts: 5 },
      { tagName: "Tag2", mismatchCounts: 3 },
    ];

    getRunSummaryAPI.mockResolvedValueOnce({
      items: [
        {
          runId: "67210f75e5a58fcf4b2f4929",
          datasetName: "IISI_Oct_21_2024_2",
          startTime: "2024-10-21T10:06:30.34",
          endTime: null,
          chunkSize: 500,
          pauseInterval: null,
          status: "STARTED",
          paymentExecutionResult: {
            totalItems: 1,
            pageNumber: 1,
            itemsPerPage: 25,
          },
        },
      ],
    });

    useParams.mockReturnValue({ paymentTestRunId: '673d09c874e7d05da2ec7fc0' });

    store = configureStore({
      reducer: {
        [RUN_DATASET_FEATURE_KEY]: runDatasetReducer,
      },
      preloadedState: {
        [RUN_DATASET_FEATURE_KEY]: {
          mismatchByTagData: mockTagData,
          mismatchByPaymentType: [],
          totalNumOfPayments: 0,
          runId: "67210f75e5a58fcf4b2f4929",
          datasetName: "IISI_Oct_21_2024_2",
          startTime: "2024-10-21T10:06:30.34",
          endTime: null,
          totalNumberOfMismatches: 0,
          misMatchPercentage: null,
          error: null,
          loading: false,
        },
      },
    });

    renderWithRedux(<RunIdSummary />, { store });

    await act(async () => await new Promise((r) => setTimeout(r, 0)));

    expect(screen.getByText("Mismatch by Tags")).toBeInTheDocument();
    expect(screen.getByText("Tag1")).toBeInTheDocument();
    expect(screen.getByText("5")).toBeInTheDocument();
    expect(screen.getByText("Tag2")).toBeInTheDocument();
    expect(screen.getByText("3")).toBeInTheDocument();
  });

  it("renders empty table when no data is returned for Mismatch by Tags", async () => {
    getRunSummaryAPI.mockResolvedValueOnce({
      items: [],
    });
    useParams.mockReturnValue({ paymentTestRunId: '673d09c874e7d05da2ec7fc0' });

    renderWithRedux(<RunIdSummary />, { store });

    await act(async () => await new Promise((r) => setTimeout(r, 0)));

    expect(screen.getByText("Mismatch by Tags")).toBeInTheDocument();
    expect(screen.queryByText("Tag1")).toBeNull();
  });
});
