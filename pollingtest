import React, { useEffect } from "react";
import { act } from "react-dom/test-utils";
import { screen } from "@testing-library/react";
import { useDispatch, useSelector } from "react-redux";
import { configureStore } from "@reduxjs/toolkit";
import { renderWithRedux } from "../../../common/_tests/testUtils/mock-store";
import PollingComponent from "../PollingComponent"; // Adjust the import path as necessary
import { getPaymentDatasetAPI } from "../../../service/paymentdataset.service";
import { updatePendingDatasetAction } from "../../../actions/paymentDatasetActions"; // Adjust the import path as necessary
import { PAYMENT_DATASET_FEATURE_KEY, paymentDatasetReducer } from "../../../reducers/paymentdataset.reducer";

jest.mock("../../../service/paymentdataset.service", () => ({
  getPaymentDatasetAPI: jest.fn(),
}));

describe("PollingComponent", () => {
  let store;
  const mockPaymentDataset = {
    id: "673d09c874e7d85da2ec7fc8",
    status: "PENDING",
  };

  beforeEach(() => {
    store = configureStore({
      reducer: {
        [PAYMENT_DATASET_FEATURE_KEY]: paymentDatasetReducer,
      },
      preloadedState: {
        [PAYMENT_DATASET_FEATURE_KEY]: {
          data: null,
          error: false,
          loading: false,
          createNewDatasetStatus: "idle",
          paymentRuns: {
            items: [],
            itemsPerPage: 25,
            pageNumber: 1,
            totalItems: 0,
          },
          dataset: {
            items: [],
          },
        },
      },
    });

    getPaymentDatasetAPI.mockResolvedValueOnce({
      id: mockPaymentDataset.id,
      status: "COMPLETED",
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("polls the API and updates the dataset when the status is not completed or error", async () => {
    renderWithRedux(<PollingComponent paymentDataset={mockPaymentDataset} />, { store });

    await act(async () => {
      await new Promise((r) => setTimeout(r, 30000));
    });

    expect(getPaymentDatasetAPI).toHaveBeenCalledWith(mockPaymentDataset.id);
    expect(store.getActions()).toContainEqual(updatePendingDatasetAction({
      items: expect.arrayContaining([expect.objectContaining({ id: mockPaymentDataset.id, status: "COMPLETED" })]),
    }));
  });

  it("does not poll if the status is completed or error", async () => {
    const completedDataset = { ...mockPaymentDataset, status: "COMPLETED" };
    renderWithRedux(<PollingComponent paymentDataset={completedDataset} />, { store });
    await act(async () => {
      await new Promise((r) => setTimeout(r, 1000)); // Short wait
    });

    expect(getPaymentDatasetAPI).not.toHaveBeenCalled();
  });
});
