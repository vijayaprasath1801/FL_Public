export const renderXmlWithHighlights = (xmlDoc, side, differencesObj, indentLevel = 8) => {
  if (!xmlDoc) return null;

  const highlightColors = {
    1: '#a8e9c0', // Green disposition 01
    2: '#f3a683', // Orange disposition 10
    3: '#f78fb3', // Pink disposition 11
  };

  const INDENT_TIMES = 6;
  const tag = xmlDoc.documentElement.tagName;
  const regExp = new RegExp(`(${tag}\\[(.+)\\]/)`, 'g');

  const getIndent = (level) => '\u00A0'.repeat(level * INDENT_TIMES);

  const walk = (node, level) => {
    let isDiffExist = false;
    let highlightColor = 'transparent';
    const xpathVal = getXPath(node);

    // Handle ELEMENT_NODE logic
    if (node.nodeType === Node.ELEMENT_NODE) {
      const children = Array.from(node.childNodes).map(child => walk(child, level + 1));

      // Determine highlighting logic
      for (const keyVal in differencesObj) {
        const key = keyVal.replace(regExp, '');
        const nodeName = xpathVal.replace('/ns:RTPSMsg', '');
        const diffNodePath = keyVal.replace(regExp, '');
        const disposition = differencesObj[keyVal]?.disposition || null;

        if (differencesObj[keyVal]?.doesTheDifferenceExist &&
            nodeName === node.nodeName &&
            node.childNodes[0]?.textContent.replace(/\s/g, "") ===
              differencesObj[keyVal]?.expectedMessage.replace(/\s/g, "")) {
          isDiffExist = true;
          highlightColor = highlightColors[disposition] || 'transparent';
        }
      }

      const shouldHighlight = isDiffExist;

      // Render the element
      return (
        <div
          className="tempDiv"
          style={{ display: 'inline-block', backgroundColor: shouldHighlight ? highlightColor : 'transparent' }}
        >
          <span>{getIndent(level)}&lt;{node.nodeName}</span>
          {Array.from(node.attributes).map(attr => (
            <span key={attr.name}>{` ${attr.name}="${attr.value}"`}</span>
          ))}
          <span>&gt;</span>
          {children.length > 0 ? children : <hr />}
          <span>{getIndent(level)}</span>
          <span>{`</${node.nodeName}>`}</span>
        </div>
      );
    }

    // Handle TEXT_NODE logic
    else if (node.nodeType === Node.TEXT_NODE) {
      return <span>{node.nodeValue.replace(/\s/g, " ")}</span>;
    }

    return null;
  };

  const renderWithAlignment = (leftXml, rightXml) => {
    const leftLines = leftXml.split('\n');
    const rightLines = rightXml.split('\n');
    const maxLength = Math.max(leftLines.length, rightLines.length);
    const alignedOutput = [];

    for (let i = 0; i < maxLength; i++) {
      const leftLine = leftLines[i] || '';
      const rightLine = rightLines[i] || '';

      if (side === 'left') {
        alignedOutput.push(leftLine);
        if (rightLine.includes('style="background-color:')) {
          alignedOutput.push('<hr />'); // Empty line for alignment
        }
      } else {
        if (leftLine.includes('style="background-color:')) {
          alignedOutput.push(leftLine);
        }
        alignedOutput.push(rightLine);
      }
    }

    return alignedOutput.join('\n');
  };

  const xmlOutput = walk(xmlDoc.documentElement, indentLevel);
  return renderWithAlignment(xmlOutput, xmlOutput); // Adjust this to pass left and right XML
};

function getXPath(node) {
  if (node === document) {
    return "/";
  }
  let path = "";
  let siblingIndex = 1;
  while (node.parentNode) {
    const nodeName = node.nodeName;
    const siblings = Array.from(node.parentNode.childNodes).filter(child => child.nodeName === nodeName);
    if (siblings.length > 1) {
      siblingIndex = siblings.indexOf(node) + 1;
      path = `/${nodeName}[${siblingIndex}]${path}`;
    } else {
      path = `/${nodeName}${path}`;
    node = node.parentNode;
  }
  return path;
}
