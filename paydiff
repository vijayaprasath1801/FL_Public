export const renderXmlWithHighlights = (xmlDoc, side, differencesObj, indentLevel = 8) => {
  if (!xmlDoc) return null;

  const highlightColors = {
    1: '#a8e9c0', // Green disposition (0 1)
    2: '#f3a683', // Orange disposition (1 0)
    3: '#f78fb3', // Pink disposition (1 1)
  };

  const INDENT_TIMES = 6;
  const tag = xmlDoc.documentElement.tagName;
  const regExp = new RegExp(`(${tag}\\[(.+)\\]/)`, 'g');

  const getIndent = (level) => '\u00A0'.repeat(level * INDENT_TIMES);

  const walk = (node, level, isLeftSide) => {
    let isDiffExist = false;
    let highlightColor = 'transparent';
    const xpathVal = getXPath(node);

    // Handle ELEMENT_NODE logic
    if (node.nodeType === Node.ELEMENT_NODE) {
      const children = Array.from(node.childNodes).map(child => walk(child, level + 1, isLeftSide));

      // Determine highlighting logic
      for (const keyVal in differencesObj) {
        const key = keyVal.replace(regExp, '');
        const nodeName = xpathVal.replace('/ns:RTPSMsg', '');
        const diffNodePath = keyVal.replace(regExp, '');
        const disposition = differencesObj[keyVal]?.disposition || null;

        if (differencesObj[keyVal]?.doesTheDifferenceExist &&
            nodeName === node.nodeName &&
            node.childNodes[0]?.textContent.replace(/\s/g, "") ===
              differencesObj[keyVal]?.expectedMessage.replace(/\s/g, "")) {
          isDiffExist = true;
          highlightColor = highlightColors[disposition] || 'transparent';
        }
      }

      const shouldHighlight = isDiffExist;

      // Render the element
      return (
        <div
          className="tempDiv"
          style={{ display: 'inline-block', backgroundColor: shouldHighlight ? highlightColor : 'transparent' }}
        >
          <span>{getIndent(level)}&lt;{node.nodeName}</span>
          {Array.from(node.attributes).map(attr => (
            <span key={attr.name}>{` ${attr.name}="${attr.value}"`}</span>
          ))}
          <span>&gt;</span>
          {children.length > 0 ? children : <hr />}
          <span>{getIndent(level)}</span>
          <span>{`</${node.nodeName}>`}</span>
        </div>
      );
    }

    // Handle TEXT_NODE logic
    else if (node.nodeType === Node.TEXT_NODE) {
      return <span>{node.nodeValue.replace(/\s/g, " ")}</span>;
    }

    return null;
  };

  // Generate empty lines based on differences
  const generateEmptyLines = (count) => {
    return Array.from({ length: count }, (_, i) => <hr key={i} />);
  };

  // Main rendering logic
  let leftEmptyLinesCount = 0;
  let rightEmptyLinesCount = 0;

  for (const key in differencesObj) {
    if (differencesObj[key].disposition === 1) { // Present on right only
      rightEmptyLinesCount++;
    } else if (differencesObj[key].disposition === 2) { // Present on left only
      leftEmptyLinesCount++;
    }
  }

  return (
    <div>
      {/* Left Side */}
      <div>
        {walk(xmlDoc.documentElement, indentLevel, true)}
        {generateEmptyLines(leftEmptyLinesCount)}
      </div>

      {/* Right Side */}
      <div>
        {walk(xmlDoc.documentElement, indentLevel, false)}
        {generateEmptyLines(rightEmptyLinesCount)}
      </div>
    </div>
  );
};

function getXPath(node) {
  if (node === document) return "/";
  
  let path = "";
  let siblingIndex = 1;
  
  while (node.parentNode) {
    const nodeName = node.nodeName;
    const siblings = Array.from(node.parentNode.childNodes).filter(child => child.nodeName === nodeName);
    
    if (siblings.length > 1) {
      siblingIndex = siblings.indexOf(node) + 1;
      path = `/${nodeName}[${siblingIndex}]${path}`;
    } else {
      path = `/${nodeName}${path}`;
    }
    
    node = node.parentNode;
  }
  
  return path;
}
