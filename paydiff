export const renderXmlWithHighlights = (
  leftXmlDoc,
  rightXmlDoc,
  differencesObj,
  indentLevel = 8
) => {
  if (!leftXmlDoc || !rightXmlDoc) return null;

  const highlightColors = {
    1: '#a8e9c0', // Green (Right only)
    2: '#f3a683', // Orange (Left only)
    3: '#f78fb3', // Pink (Different between left and right)
  };

  const INDENT_TIMES = 6;
  const getIndent = (level) => '\u00A0'.repeat(level * INDENT_TIMES);

  const getXPath = (node) => {
    if (node.nodeType === Node.ELEMENT_NODE) {
      let path = node.nodeName;
      while (node.parentNode && node.parentNode.nodeName !== '#document') {
        node = node.parentNode;
        path = node.nodeName + '/' + path;
      }
      return path;
    }
    return '';
  };

  const walk = (node, level, isRightSide) => {
    let highlightColor = 'transparent';
    const xpathVal = getXPath(node);

    Object.keys(differencesObj).forEach((keyVal) => {
      const disposition = differencesObj[keyVal]?.disposition;
      const doesDiffExist = differencesObj[keyVal]?.doesTheDifferenceExist;

      if (doesDiffExist && xpathVal.endsWith(keyVal)) {
        if (isRightSide && disposition === 1) {
          highlightColor = highlightColors[1];
        } else if (!isRightSide && disposition === 2) {
          highlightColor = highlightColors[2];
        } else if (disposition === 3) {
          highlightColor = highlightColors[3];
        }
      }
    });

    if (node.nodeType === Node.ELEMENT_NODE) {
      const children = Array.from(node.childNodes).map((child) =>
        walk(child, level + 1, isRightSide)
      );

      return (
        <div
          key={xpathVal}
          style={{
            display: 'block',
            backgroundColor: highlightColor,
            paddingLeft: `${level * INDENT_TIMES}px`,
          }}
        >
          <span>{`${getIndent(level)}<${node.nodeName}`}</span>
          {Array.from(node.attributes).map((attr) => (
            <span key={attr.name}>{` ${attr.name}="${attr.value}"`}</span>
          ))}
          <span>&gt;</span>
          {children}
          <span>{`${getIndent(level)}</${node.nodeName}>`}</span>
        </div>
      );
    }

    if (node.nodeType === Node.TEXT_NODE) {
      return (
        <span key={xpathVal} style={{ backgroundColor: highlightColor }}>
          {node.nodeValue.trim()}
        </span>
      );
    }

    return null;
  };

  return {
    leftXmlResult: walk(leftXmlDoc.documentElement, indentLevel, false),
    rightXmlResult: walk(rightXmlDoc.documentElement, indentLevel, true),
  };
};
