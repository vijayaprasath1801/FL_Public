<Flexgrid columnGap={6} rowGap={3}>
  {/* Left Side: Expected Message */}
  <FlexgridItem className="xmlContainerLeft" span={6} spacing={{ t: 1, l: 4 }}>
    <h3>Payment into EMTS (Raw format)</h3>
    {Object.entries(diff.differences).map(([path, item]) => {
      const leftHeight = item.type === 2 ? document.getElementById(`left-${path}`)?.clientHeight : null;
      return (
        <FlexgridItem id={`left-${path}`} span={12} spacing={{ b: 2 }}>
          {item.type !== 2 && renderNodeXML(parseXml(diff.expectedMessage.message), path, item.type)}
          {item.type === 2 && (
            <div style={{ height: `${leftHeight}px`, backgroundColor: '#ffebee', border: '1px dashed #ffcdd2' }}>
            </div>
          )}
        </FlexgridItem>
      );
    })}
  </FlexgridItem>

  <FlexgridItem span={6} spacing={{ t: 1, l: 8 }}>
    <h3>Payment into EPE (Raw format)</h3>
    {Object.entries(diff.differences).map(([path, item]) => {
      const rightHeight = item.type === 1 ? document.getElementById(`right-${path}`)?.clientHeight : null;
      return (
        <FlexgridItem id={`right-${path}`} span={12} spacing={{ b: 2 }}>
          {item.type !== 1 && renderNodeXML(parseXml(diff.actualMessage.message), path, item.type)}
          {item.type === 1 && (
            <div style={{ height: `${rightHeight}px`, backgroundColor: '#e3f2fd', border: '1px dashed #90caf9' }}>
            </div>
          )}
        </FlexgridItem>
      );
    })}
  </FlexgridItem>
</Flexgrid>


<Flexgrid columnGap={6} rowGap={3}>
  {/* Left Column (EMTS Raw Format) */}
  <FlexgridItem className="xmlContainerLeft" span={6} spacing={{ t: 1, 1: 4 }}>
    <h3>Payment into EMTS (Raw format)</h3>
    {Object.entries(diff.differences).map(([path, item], index) => {
      let leftStyle = {};
      let rightStyle = {};
      if (item.type === 1) {
        rightStyle = { minHeight: `${getHeightForRight(index)}px` };
      } else if (item.type === 2) {
        leftStyle = { minHeight: `${getHeightForLeft(index)}px` };
      }
      return (
        <FlexgridItem span={12} spacing={{ b: 2 }} style={leftStyle}>
          {renderNodeXML(parseXml(diff.expectedMessage.message), path, item.type)}
        </FlexgridItem>
      );
    })}
  </FlexgridItem>

  {/* Right Column (EPE Raw Format) */}
  <FlexgridItem span={6} spacing={{ t: 1, 1: 8 }}>
    <h3>Payment into EPE (Raw format)</h3>
    {Object.entries(diff.differences).map(([path, item], index) => {
      let leftStyle = {};
      let rightStyle = {};
      if (item.type === 1) {
        rightStyle = { minHeight: `${getHeightForRight(index)}px` };
      } else if (item.type === 2) {
        leftStyle = { minHeight: `${getHeightForLeft(index)}px` }; 
      }
      return (
        <FlexgridItem span={12} spacing={{ b: 2 }} style={rightStyle}>
          {renderNodeXML(parseXml(diff.actualMessage.message), path, item.type)}
        </FlexgridItem>
      );
    })}
  </FlexgridItem>
</Flexgrid>


  const [leftHeights, setLeftHeights] = useState({});
  const [rightHeights, setRightHeights] = useState({});

  useEffect(() => {
    const newLeftHeights = {};
    const newRightHeights = {};

    Object.entries(diff.differences).forEach(([path, item]) => {
      if (item.type === 2) {
        const leftElement = document.getElementById(`left-${path}`);
        if (leftElement) {
          newLeftHeights[path] = leftElement.clientHeight;
        }
      }
      if (item.type === 1) {
        const rightElement = document.getElementById(`right-${path}`);
        if (rightElement) {
          newRightHeights[path] = rightElement.clientHeight;
        }
      }
    });

    setLeftHeights(newLeftHeights);
    setRightHeights(newRightHeights);
  }, [diff]);

 <Flexgrid columnGap={6} rowGap={3}>
      {/* Left Side: Expected Message */}
      <FlexgridItem className="xmlContainerLeft" span={6} spacing={{ t: 1, l: 4 }}>
        <h3>Payment into EMTS (Raw format)</h3>
        {Object.entries(diff.differences).map(([path, item]) => (
          <FlexgridItem id={`left-${path}`} span={12} spacing={{ b: 2 }} key={`left-${path}`}>
            {item.type !== 2 && renderNodeXML(parseXml(diff.expectedMessage.message), path, item.type)}
            {item.type === 2 && (
              <div style={{ height: `${leftHeights[path] || 0}px`, backgroundColor: '#ffebee', border: '1px dashed #ffcdd2' }}>
              </div>
            )}
          </FlexgridItem>
        ))}
      </FlexgridItem>

      <FlexgridItem span={6} spacing={{ t: 1, l: 8 }}>
        <h3>Payment into EPE (Raw format)</h3>
        {Object.entries(diff.differences).map(([path, item]) => (
          <FlexgridItem id={`right-${path}`} span={12} spacing={{ b: 2 }} key={`right-${path}`}>
            {item.type !== 1 && renderNodeXML(parseXml(diff.actualMessage.message), path, item.type)}
            {item.type === 1 && (
              <div style={{ height: `${rightHeights[path] || 0}px`, backgroundColor: '#e3f2fd', border: '1px dashed #90caf9' }}>
              </div>
            )}
          </FlexgridItem>
        ))}
      </FlexgridItem>
    </Flexgrid>
