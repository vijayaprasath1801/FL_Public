import React, { useEffect, useRef, useState } from 'react';

const YourComponent = ({ diff }) => {
  const leftRefs = useRef({});
  const rightRefs = useRef({});
  const [leftHeights, setLeftHeights] = useState({});
  const [rightHeights, setRightHeights] = useState({});

  useEffect(() => {
    const newLeftHeights = {};
    const newRightHeights = {};

    Object.entries(diff.differences).forEach(([path, item]) => {
      if (item.type === 2) {
        newLeftHeights[path] = leftRefs.current[path]?.clientHeight || 0;
      }
      if (item.type === 1) {
        newRightHeights[path] = rightRefs.current[path]?.clientHeight || 0;
      }
    });

    setLeftHeights(newLeftHeights);
    setRightHeights(newRightHeights);
  }, [diff]);

  return (
    <Flexgrid columnGap={6} rowGap={3}>
      {/* Left Side: Expected Message */}
      <FlexgridItem className="xmlContainerLeft" span={6} spacing={{ t: 1, l: 4 }}>
        <h3>Payment into EMTS (Raw format)</h3>
        {Object.entries(diff.differences).map(([path, item]) => (
          <FlexgridItem key={`left-${path}`} span={12} spacing={{ b: 2 }}>
            {item.type !== 2 && (
              <div ref={el => (leftRefs.current[path] = el)}>
                {renderNodeXML(parseXml(diff.expectedMessage.message), path, item.type)}
              </div>
            )}
            {item.type === 2 && (
              <div style={{ height: `${leftHeights[path] || 0}px`, backgroundColor: '#ffebee', border: '1px dashed #ffcdd2' }}>
                {/* Highlighted space for alignment */}
              </div>
            )}
          </FlexgridItem>
        ))}
      </FlexgridItem>

      {/* Right Side: Actual Message */}
      <FlexgridItem span={6} spacing={{ t: 1, l: 8 }}>
        <h3>Payment into EPE (Raw format)</h3>
        {Object.entries(diff.differences).map(([path, item]) => (
          <FlexgridItem key={`right-${path}`} span={12} spacing={{ b: 2 }}>
            {item.type !== 1 && (
              <div ref={el => (rightRefs.current[path] = el)}>
                {renderNodeXML(parseXml(diff.actualMessage.message), path, item.type)}
              </div>
            )}
            {item.type === 1 && (
              <div style={{ height: `${rightHeights[path] || 0}px`, backgroundColor: '#e3f2fd', border: '1px dashed #90caf9' }}>
                {/* Highlighted space for alignment */}
              </div>
            )}
          </FlexgridItem>
        ))}
      </FlexgridItem>
    </Flexgrid>
  );
};

export default YourComponent;s
