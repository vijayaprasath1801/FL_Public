export const renderXmlWithHighlights = (xmlDoc, side, differencesObj, indentLevel = 0) => {
  if (!xmlDoc) {
    return null;
  }

  const INDENT_TIMES = 6;

  const highlightColors = {
    1: '#a8e9c0', // Green: Right has it, left doesn't (0 1)
    2: '#f3a683', // Orange: Left has it, right doesn't (1 0)
    3: '#f78fb3', // Pink: Both have it, but they differ (1 1)
  };

  const walk = (node, level) => {
    const indent = ' '.repeat(level * INDENT_TIMES);
    let isDiffExist = false;
    let highlightColor = 'transparent'; // Default color
    const xpathVal = getXPath(node);

    // Check for differences in the current node
    for (let keyVal in differencesObj) {
      const { expectedMessage, actualMessage, disposition } = differencesObj[keyVal] || {};
      const nodePath = xpathVal.replace('/ns:RTPSMsg', '');
      const diffNodePath = keyVal.replace(/\/ns:RTPSMsg/g, ''); // Updated regex for consistency

      if (nodePath === diffNodePath) {
        if (
          (side === 'left' && disposition === 2 && node.childNodes[0]?.textContent?.trim() === expectedMessage?.trim()) ||
          (side === 'right' && disposition === 1 && node.childNodes[0]?.textContent?.trim() === actualMessage?.trim()) ||
          (disposition === 3 &&
            node.childNodes[0]?.textContent?.trim() ===
              (side === 'left' ? expectedMessage : actualMessage)?.trim())
        ) {
          isDiffExist = true;
          highlightColor = highlightColors[disposition] || 'transparent'; // Assign color based on disposition
          break;
        }
      }
    }

    const children = Array.from(node.childNodes).map((child) => walk(child, level + 1));

    if (node.nodeType === Node.ELEMENT_NODE) {
      return (
        <div
          className="tempDiv"
          style={{
            display: 'inline-block',
            backgroundColor: isDiffExist ? highlightColor : 'transparent',
          }}
        >
          <span>{`${indent}<${node.nodeName}>`}</span>
          {Array.from(node.attributes).map((attr, i) => (
            <span key={i}>{`${attr.name}="${attr.value}"`}</span>
          ))}
          <span>{'>'}</span>
          {children.length > 0 && <br />}
          {children}
          <span>{`${indent}</${node.nodeName}>`}</span>
        </div>
      );
    } else if (node.nodeType === Node.TEXT_NODE) {
      const text = node.nodeValue?.trim();
      return text ? <span>{text}</span> : null;
    }
    return null;
  };

  return walk(xmlDoc.documentElement, indentLevel);
};
