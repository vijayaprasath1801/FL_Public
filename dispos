export const renderXmlWithHighlights = (xmlDoc, side, differencesObj, indentLevel = 8) => {
  if (!xmlDoc) return null;

  const highlightColors = {
    1: '#a8e9c0', // Green disposition 01
    2: '#f3a683', // Orange disposition 10
    3: '#f78fb3', // Pink disposition 11
  };

  const INDENT_TIMES = 6;

  const getIndent = (level) => '\u00A0'.repeat(level * INDENT_TIMES);

  const renderEmptyLine = (level) => (
    <div style={{ visibility: 'hidden' }}>
      {getIndent(level)}&lt;empty/&gt;
    </div>
  );

  const walk = (node, level) => {
    const xpathVal = getXPath(node);
    const diff = differencesObj[xpathVal];
    let highlightColor = 'transparent';
    let shouldRenderEmpty = false;

    // Directly check disposition values
    if (diff) {
      switch (diff.disposition) {
        case 1: // (0 1) Present in the right XML only
          if (side === 'right') {
            highlightColor = highlightColors[1];
          } else if (side === 'left') {
            shouldRenderEmpty = true;
          }
          break;
        case 2: // (1 0) Present in the left XML only
          if (side === 'left') {
            highlightColor = highlightColors[2];
          } else if (side === 'right') {
            shouldRenderEmpty = true;
          }
          break;
        case 3: // (1 1) Present in both XMLs but differs
          highlightColor = highlightColors[3];
          break;
        default:
          break;
      }
    }

    // If we need to render an empty line to align the left side
    if (shouldRenderEmpty) {
      return renderEmptyLine(level);
    }

    // If the node is an element, we need to render it
    if (node.nodeType === Node.ELEMENT_NODE) {
      const children = Array.from(node.childNodes).map((child) =>
        walk(child, level + 1)
      );

      return (
        <div
          style={{
            display: 'block',
            backgroundColor: highlightColor,
          }}
        >
          <span>
            {getIndent(level)}&lt;{node.nodeName}
          </span>
          {Array.from(node.attributes).map((attr) => (
            <span key={attr.name}>{` ${attr.name}="${attr.value}"`}</span>
          ))}
          <span>&gt;</span>
          {children.length > 0 ? children : null}
          <span>
            {getIndent(level)}&lt;/{node.nodeName}&gt;
          </span>
        </div>
      );
    } else if (node.nodeType === Node.TEXT_NODE) {
      return <span>{node.nodeValue}</span>;
    }

    return null;
  };

  return walk(xmlDoc.documentElement, indentLevel);
};
