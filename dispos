export const renderXmlWithHighlights = (xmlDoc, side, differencesObj, indentLevel = 8) => {
  if (!xmlDoc) return null;

  const highlightColors = {
    1: '#a8e9c0', // Green disposition 01
    2: '#f3a683', // Orange disposition 10
    3: '#f78fb3', // Pink disposition 11
  };

  const INDENT_TIMES = 6;
  const tag = xmlDoc.documentElement.tagName;
  const regExp = new RegExp(`(${tag}\\[(.+)\\]/)`, 'g');
  
  const getIndent = (level) => '\u00A0'.repeat(level * INDENT_TIMES);

  const createEmptyLines = (count) => (
    Array.from({ length: count }, (_, index) => <div key={`empty-${index}`}><br /></div>)
  );

  const walk = (node, level) => {
    let isDiffExist = false;
    let highlightColor = 'transparent';
    const xpathVal = getXPath(node);

    if (node.nodeType === Node.ELEMENT_NODE) {
      const children = Array.from(node.childNodes).map(child => walk(child, level + 1));
      let emptyLines = [];

      // Determine highlighting logic
      for (const keyVal in differencesObj) {
        const key = keyVal.replace(regExp, '');
        const diffNodePath = keyVal.replace(regExp, '');
        const disposition = differencesObj[keyVal]?.disposition || null;

        if (differencesObj[keyVal]?.doesTheDifferenceExist) {
          const expectedMessage = differencesObj[keyVal]?.expectedMessage || '';
          const actualMessage = differencesObj[keyVal]?.actualMessage || '';

          // Handle disposition cases
          switch (disposition) {
            case 1: // Present on right only
              if (side === 'right') {
                isDiffExist = true;
                highlightColor = highlightColors[disposition];
              } else {
                emptyLines = createEmptyLines(actualMessage.split('\n').length);
              }
              break;

            case 2: // Present on left only
              if (side === 'left') {
                isDiffExist = true;
                highlightColor = highlightColors[disposition];
              } else {
                emptyLines = createEmptyLines(expectedMessage.split('\n').length);
              }
              break;

            case 3: // Different on both sides
              isDiffExist = true;
              highlightColor = highlightColors[disposition];
              break;

            default:
              break;
          }
        }
      }

      const shouldHighlight = isDiffExist;

      // Render the element
      return (
        <div
          className="tempDiv"
          style={{ display: 'inline-block', backgroundColor: shouldHighlight ? highlightColor : 'transparent' }}
        >
          <span>{getIndent(level)}&lt;{node.nodeName}</span>
          {Array.from(node.attributes).map(attr => (
            <span key={attr.name}>{` ${attr.name}="${attr.value}"`}</span>
          ))}
          <span>&gt;</span>
          {children.length > 0 ? children : <hr />}
          {emptyLines}
          <span>{getIndent(level)}</span>
          <span>{`</${node.nodeName}>`}</span>
        </div>
      );
    }

    // Handle TEXT_NODE logic
    else if (node.nodeType === Node.TEXT_NODE) {
      return <span>{node.nodeValue.replace(/\s/g, " ")}</span>;
    }

    return null;
  };

  return walk(xmlDoc.documentElement, indentLevel);
};
