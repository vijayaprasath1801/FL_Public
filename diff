import React from 'react';
import ReactDiffViewer from 'react-diff-viewer';

const oldCode = `
const a = 10;
const b = 10;
const c = () => console.log('foo');

if (a > 10) {
  console.log('bar');
}

console.log('done');
`;

const newCode = `
const a = 10;
const boo = 10;

if (a === 10) {
  console.log('bar');
}
`;

const customStyles = {
  variables: {
    light: {
      addedBackground: '#e6ffed',
      removedBackground: '#ffeef0',
      addedColor: '#256029',
      removedColor: '#8b0000',
      highlightBackground: '#fefed5',
      highlightGutterBackground: '#ffcd3c',
    },
  },
  diffAdded: {
    background: '#d4f8d4',
  },
  diffRemoved: {
    background: '#f8d4d4',
  },
  line: {
    padding: '10px 2px',
    '&:hover': {
      background: '#e8e8e8',
    },
  },
};

const DiffViewer = () => {
  return (
    <ReactDiffViewer
      oldValue={oldCode}
      newValue={newCode}
      splitView={true}
      styles={customStyles}
    />
  );
};

export default DiffViewer;

DiffMethod {
  CHARS = "diffChars",
  WORDS = "diffWords",
  WORDS_WITH_SPACE = "diffWordsWithSpace",
  LINES = "diffLines",
  TRIMMED_LINES = "diffTrimmedLines",
  SENTENCES = "diffSentences",
  CSS = "diffCss"
}

  const highlightColors = {
    1: '#a8e9c0', // Green
    2: '#f3a683', // Orange
    3: '#f78fb3', // Pink
    4: '#63cdda', // Blue
    5: '#786fa6', // Purple
  };

function formatDateRange(startDateTime, endDateTime) {
  const options = { month: 'short', day: '2-digit' };
  
  const startDate = new Date(startDateTime);
  const endDate = new Date(endDateTime);

  const formattedStart = `${startDate.toLocaleDateString('en-US', options)}-${startDate.getFullYear().toString().slice(-2)} ${startDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}`;
  const formattedEnd = `${endDate.toLocaleDateString('en-US', options)}-${endDate.getFullYear().toString().slice(-2)} ${endDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}`;

  return `${formattedStart} - ${formattedEnd}`;
}


//24hrs
function formatDateRange(startDateTime, endDateTime) {
  const options = { month: 'short', day: '2-digit' };

  const startDate = new Date(startDateTime);
  const endDate = new Date(endDateTime);

  const formattedStart = `${startDate.toLocaleDateString('en-US', options)}-${startDate.getFullYear().toString().slice(-2)} ${startDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hourCycle: 'h23' })}`;
  const formattedEnd = `${endDate.toLocaleDateString('en-US', options)}-${endDate.getFullYear().toString().slice(-2)} ${endDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hourCycle: 'h23' })}`;

  return `${formattedStart} - ${formattedEnd}`;
}



export const renderXmlWithHighlights = (xmlDoc, side, differencesObj, indentLevel = 0) => {
  if (!xmlDoc) {
    return null;
  }

  const INDENT_TIMES = 6;

  const highlightColors = {
    1: '#a8e9c0', // Green: Right has it, left doesn't (0 1)
    2: '#f3a683', // Orange: Left has it, right doesn't (1 0)
    3: '#f78fb3', // Pink: Both have it, but they differ (1 1)
  };

  const walk = (node, level) => {
    const indent = ' '.repeat(level * INDENT_TIMES);
    let isDiffExist = false;
    let highlightColor = 'transparent'; // Default color
    const xpathVal = getXPath(node);

    // Check for differences in the current node
    for (let keyVal in differencesObj) {
      const { expectedMessage, actualMessage, doesTheDifferenceExist, type } = differencesObj[keyVal] || {};
      const nodePath = xpathVal.replace('/ns:RTPSMsg', '');
      const diffNodePath = keyVal.replace(/\/ns:RTPSMsg/g, ''); // Updated regex for consistency
     if (
        nodePath === diffNodePath &&
        ((side === 'left' && disposition === 2 && node.childNodes[0]?.textContent?.replace(/\s/g, '') === expectedMessage?.replace(/\s/g, '')) ||
          (side === 'right' && disposition === 1 && node.childNodes[0]?.textContent?.replace(/\s/g, '') === actualMessage?.replace(/\s/g, '')) ||
          (disposition === 3 &&
            node.childNodes[0]?.textContent?.replace(/\s/g, '') ===
              (side === 'left' ? expectedMessage : actualMessage)?.replace(/\s/g, '')))
      ) {
        isDiffExist = true;
        highlightColor = highlightColors[type] || 'transparent'; // Assign color based on type
        break;
      }
    }

    const children = Array.from(node.childNodes).map((child) => walk(child, level + 1));

    if (node.nodeType === Node.ELEMENT_NODE) {
      return (
        <div
          className="tempDiv"
          style={{
            display: 'inline-block',
            backgroundColor: isDiffExist ? highlightColor : 'transparent',
          }}
        >
          <span>{${indent}<${node.nodeName}>}</span>
          {Array.from(node.attributes).map((attr, i) => (
            <span key={i}>{ ${attr.name}="${attr.value}"}</span>
          ))}
          <span>{'>'}</span>
          {children.length > 0 && <br />}
          {children}
          <span>{${indent}</${node.nodeName}>}</span>
        </div>
      );
    } else if (node.nodeType === Node.TEXT_NODE) {
      const text = node.nodeValue?.trim();
      return text ? <span>{text}</span> : null;
    }
    return null;
  };

  return walk(xmlDoc.documentElement, indentLevel);
};
