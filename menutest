import React, {act } from "react"; 
import { render, fireEvent, screen, waitFor, cleanup } from "@testing-library/react"; 
import ActionButtons from "./ActionButtons"; 
global.ResizeObserver jest.fn().mockImplementation(() => ({ 
observe: jest.fn(), 
unobserve: jest.fn(), 
disconnect: jest.fn(), 
})) 
describe("ActionButtons", () => { 
const mockOnActionClick jest.fn(); 
const mockItem = { 
paymentsCount: 1, 
}; 
const renderComponent = (status, pageType, disabled = false) => { 
render( 
<ActionButtons 
status={status) 
onActionClick-mockOnActionClick) 
disabled-(disabled) 
item-(mockItem} 
pageType-(pageType) 
); 
]; 
beforeEach(() => { 
mockOnActionClick.mockClear(); 
});

it("renders correct actions based on status and pageType", async() => { 
cleanup(); 
renderComponent("PAUSED", "testRun"); 
let actionsButton = screen.getByRole("button", { name: /Actions/1 }); 
fireEvent.click(actionsButton); 
await act(async () => { await new Promise((r) > setTimeout(r, 0)) }); 
expect(screen.getByRole("button", { name: /Resume/1})).toBeInTheDocument(); 
expect(screen.queryByText("Cancel")).toBeNull(); 
cleanup(); 
renderComponent("RESUMED", "testRun"); 
actionsButton screen.getByRole("button", (name: /Actions/i]); 
fireEvent.click(actionsButton); 
await act(async () => ( await new Promise((r) -> setTimeout(r, 0)) )); 
await waitFor(()->{ 
expect(screen.getByRole("button", { name: /Pause/1))).toBeInTheDocument(); }) 
cleanup(); 
renderComponent("COMPLETED", "testRun"); 
actionsButton screen.getByRole("button", (name: /Actions/1}); 
fireEvent.click(actionsButton); 
await act(async () => { await new Promise((r) -> setTimeout(r, 0)) }); 
expect(screen.getByRole("button", { name: /Re-Run/1})).toBe In The Document(); 
cleanup(); 
renderComponent("COMPLETED", "payments"); 
actionsButton = screen.getByRole("button", { name: /Actions/i }); 
fireEvent.click(actionsButton); 
await act(async () -> (await new Promise((r) -> setTimeout(r, 0)) )); 
expect(screen.getByRole("button", { name: /Schedule a run/i})).toBeInTheDocument(); 
cleanup(); 
});
