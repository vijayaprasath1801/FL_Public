import React from "react";
import { render, fireEvent, screen } from "@testing-library/react";
import ActionButtons from "../ActionButtons";  // Adjust the path accordingly

describe("ActionButtons", () => {
  const mockOnActionClick = jest.fn();

  const mockItem = {
    payment: {
      sCount: 1,
    },
  };

  const renderComponent = (status, pageType, disabled = false) => {
    render(
      <ActionButtons
        status={status}
        onActionClick={mockOnActionClick}
        disabled={disabled}
        item={mockItem}
        pageType={pageType}
      />
    );
  };

  beforeEach(() => {
    mockOnActionClick.mockClear();
  });
  it("renders 'Pause' action for 'STARTED' status", async () => {
    renderComponent("STARTED", "testRun");

  
    fireEvent.mouseDown(screen.getByRole("button", { name: /Actions/i }));

 
    await waitFor(() => {
      expect(screen.getByRole("menuitem", { name: /Pause/i })).toBeInTheDocument();
    });
  });

  it("renders 'Cancel' action for 'STARTED' status", async () => {
    renderComponent("STARTED", "testRun");

 
    fireEvent.mouseDown(screen.getByRole("button", { name: /Actions/i }));

   
    await waitFor(() => {
      expect(screen.getByRole("menuitem", { name: /Cancel/i })).toBeInTheDocument();
    });
  });

  it("renders 'Resume' action for 'PAUSED' status", async () => {
    renderComponent("PAUSED", "testRun");

  
    fireEvent.mouseDown(screen.getByRole("button", { name: /Actions/i }));

 
    await waitFor(() => {
      expect(screen.getByRole("menuitem", { name: /Resume/i })).toBeInTheDocument();
    });
  });

  it("renders 'Re-Run' action for 'COMPLETED' status", async () => {
    renderComponent("COMPLETED", "testRun");

  
    fireEvent.mouseDown(screen.getByRole("button", { name: /Actions/i }));

  
    await waitFor(() => {
      expect(screen.getByRole("menuitem", { name: /Re-Run/i })).toBeInTheDocument();
    });
  });

  it("does not render actions when disabled", async () => {
    renderComponent("PAUSED", "testRun");

 
    fireEvent.mouseDown(screen.getByRole("button", { name: /Actions/i }));

  
    await waitFor(() => {
      expect(screen.queryByRole("menuitem", { name: /Resume/i })).toBeNull();
      expect(screen.queryByRole("menuitem", { name: /Pause/i })).toBeNull();
      expect(screen.queryByRole("menuitem", { name: /Cancel/i })).toBeNull();
      expect(screen.queryByRole("menuitem", { name: /Re-Run/i })).toBeNull();
    });
  });

  it("calls onActionClick when an action is selected", async () => {
    renderComponent("STARTED", "testRun");

   
    fireEvent.mouseDown(screen.getByRole("button", { name: /Actions/i }));

 
    await waitFor(() => {
      fireEvent.click(screen.getByRole("menuitem", { name: /Pause/i }));
    });

 
    expect(mockOnActionClick).toHaveBeenCalledWith("pause", mockItem);

  
    await waitFor(() => {
      fireEvent.click(screen.getByRole("menuitem", { name: /Cancel/i }));
    });

 
    expect(mockOnActionClick).toHaveBeenCalledWith("cancel", mockItem);
  });
});
