const DiffView = () => { 
return ( 
(!loading && filtered Differences?.length > 0 && ( 
filteredDifferences.map((diff, 1) => { 
return ( 
<Container display="block" spacing-(mySpacing) key=(${i}_container_key"]> 
<Flexgrid> 
<FlexgridItem span=(12)> 
<div className="legendcontainer"> 
(Object.entries (diffType).map(([key, label]) -> ( 
<div className="legendBox" key-(key)> 
<input 
type="checkbox" 
id=(checkbox-${key}} 
checked={!!checkedDiffs [key]} 
onChange=(() => handleCheckboxChange (Number(key))) 
style({ accentColor: legendColors [key] }) 
[formatLegend(key, label)) 
</div> 
))} 
</div> 
</FlexgridItem> 
</Flexgrid>
<Flexgrid className='xmlContainer columnGap-(4) spacing-({t: 2, 1: 18 ]]> 
<FlexgridItem spacing-({t: 2}) span={10}> 
<Flexgrid columnGap-(6) rowGap-(3)> 
<Flexgriditen className=xmlContainerLeft" span=(6) spacing-({t: 1, 1: 4 }}> 
<h3>Payment into EMTS (Raw format)</h3> 
(diff?.expectedMessage && renderXmlWithHighlights (parseXml(diff.expectedMessage.message), 'left', diff.differences)) 
</FlexgridItem> 
<FlexgridItem span (6) spacing-({t: 1, 1: 8}}> 
<h3>Payment into EPE (Raw format)</h3> 
(diff?.actualMessage && renderXmlWithHighlights (parseXml(diff.actualMessage.message), 'right', diff.differences)) 
</Flexgriditen> 
</Flexgrid> 
</FlexgridItem> 
</Flexgrid> 
</Container> 
) 225 
)


const filteredDifferences = paymentDifferences.map((diff) => {
  const { differences } = diff;

  if (!differences || typeof differences !== "object") return diff;

  const newDifferences = Object.entries(differences).reduce((acc, [key, item]) => {
    // Exclude unchecked differences
    if (!checkedDiffs[item.type]) {
      acc[key] = { ...item, type: null };
      return acc;
    }

    // Apply new logic based on significance
    if (item.type === "significant") {
      acc[key] = {
        ...item,
        leftMessage: "", // Left side empty
        rightMessage: item.expectedValue || "", // Right side contains the expectedValue
      };
    } else if (item.type === "insignificant") {
      acc[key] = {
        ...item,
        leftMessage: item.expectedValue || "", // Left side contains the expectedValue
        rightMessage: "", // Right side empty
      };
    } else {
      // For other types, show both expectedValue and actualValue
      acc[key] = {
        ...item,
        leftMessage: item.expectedValue || "", // Left side contains the expectedValue
        rightMessage: item.actualValue || "", // Right side contains the actualValue
      };
    }

    return acc;
  }, {} as Record<string, any>);

  return { ...diff, differences: newDifferences };
});
